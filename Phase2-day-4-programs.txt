#stact implementation using arrarys
stack=[]
def push():
    element=int(input("enter the element"))
    stack.append(element)
    print(stack)

def pop_element():
    if not stack:
        print("stack is empty")
    else:
        e=stack.pop()
        print("removed element:",e)
        print(stack)

while True:
    print("select operation 1.push 2.pop 3.quit")
    choice=int(input())
    if choice==1:
        push()
    elif choice==2:
        pop_element()
    elif choice==3:
        break
    else:
        print("enter the current operation")

class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class stack:
    def __init__(self):
        self.head=None
    def isempty(self):
        if self.head ==None:
            return True
        else:
            return False
    def push(self,data):
        if self.head==None:
            self.head=node(data)
        else:
            newnode=node(data)
            newnode.next=self.head
            self.head=newnode
    def pop(self):
        if self.isempty():
            return None
        else:
            poppednode=self.head
            self.head=self.head.next
            poppednode.next=None
            return poppednode.data
    def peek(self):
        if self.isempty():
            return None
        else:
            return self.head.data
    def display(self):
        t=self.head
        if self.isempty():
            print("stack underflow")
        else:
            while(t!=None):
                print(t.data,end="")
                t=t.next
                if(t!=None):
                    print("->",end="")
            return
if __name__=="__main__":
   s=stack()
   s.push(1)
   s.push(2)
   s.push(3)
   s.push(4)
   s.display()
   print(s.peek())
   s.pop()
   s.pop()
   s.display()
   
#stack balanced paranthesis
s=input()
st=[]
balanced=True
for char in s:
    if(char=="{" or char=='[' or char=='('):
        st.append(char)
    elif(char=='}'):
        if(len(st) and st.pop()!='{'):
            balanced=False
            break
    elif(char==']'):
        if(len(st) and st.pop()!='['):
            balanced=False
            break
    elif(char==')'):
        if(len(st) and st.pop()!='('):
            balanced=False
            break
    else:
        balanced=False
        break

if(balanced==False or len(st)):
    print("not balanced")
else:
    print("balanced")






