
#Happy number
def happy(n):
    s=r=0
    while(n>=0):
        for i in range(0,len(str(n))+1):
            r=n%10
            s=s+r**2
            n=n//10
            return s
n=int(input("enter number:"))
res=n
while (res!=1 and res!=4):
    res=happy(res)
if res==1:
    print("happy number")
else:
    print("not a happy number")

#Encapsulation
#protected_
class encap:
    _a=10
    c=20
    def encapfunction(self):
        _b=200
        print("encap function-acessing protected ")
        print(self._a+10)

obj=encap()
print(obj._a)
obj.encapfunction()
print(obj.c)


#private
class encap:
    __a=10
    print(__a)
    def encapfunction(self):
        print("encap function")
        print(self.__a)
obj=encap()
obj.encapfunction()
print(obj.__a)


#public
class encap:
    a=10
    print(a)
    def encapfunction(self):
        print("encap functions")

#Method overloading
class moverload:
    def display(self,a=None,b=None):
        print(a,b)

obj=moverload()
print("without arguments")
obj.display()

print("with all arguments")
obj.display(20,30)

print("with one argument")
obj.display(10)

class vijayawada():
    def placename(self):
        print("vijayawada placenameis KLU")
    def student(self):
        print("yes-vijayawada")
    def which_year(self):
        print("3rd year")
class hyd():
    def placename(self):
        print("hyd placenameis HYD-KLU")
    def student(self):
        print("yes-hyd")
    def which_year(self):
        print("3rd year-hyd")
obj_vjy=vijayawada()
obj_hyd=hyd()
for details in (obj_vjy,obj_hyd):
    details.placename()
    details.student()
    details.which_year()

#Creating node-declaration & definition
class node:
    def __init__(self,data):
        self.data=data
        self.next=None

class singlelinkedlist:
    def __init__(self):
        self.head=None

    def display(self):
        if self.head is None:
            print("linked list is empty")
        else:
            temp=self.head#temp=forst node
            while temp:
                print(temp.data,":",end="")
                temp=temp.next
obj=singlelinkedlist()
n=node(10)
obj.head=n
n1=node(20)
obj.head.next=n1
n2=node(30)
n1.next=n2
obj.display()

class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class singlelinkedlist:
    def __init__(self):
        self.head=None

    def insert_beginning(self,data):
        nb=node(data)
        nb.next=self.head
        self.head=nb

    def display(self):
        if self.head is None:
            print("linked list is empty")
        else:
            temp=self.head
            while temp:
                print(temp.data," ",end="")
                temp=temp.next
obj=singlelinkedlist()
n=node(10)
obj.head=n
n1=node(20)
n.next=n1
n2=node(30)
n1.next=n2
n3=node(40)
n2.next=n3
n4=node(50)
n3.next=n4
print("before inserting 100")
obj.display()
print("")
print("after inserting 100")
obj.insert_beginning(100)
obj.display()
print("")
print("after inserting 555")
obj.insert_beginning(555)
obj.display()

class node:
    def __init__(self,data):
        self.data=data
        self.next=None

class singlelinkedlist:
    def __init__(self):
        self.head=None

    def display(self):
        if self.head is None:
            print("linked list is empty")
        else:
            temp=self.head#temp=first node
            while temp:
                print(temp.data,end="")
                temp=temp.next
obj=singlelinkedlist()
n=node("w")
obj.head=n
n1=node("i")
obj.head.next=n1
n2=node("n")
n1.next=n2
n3=node("n")
n2.next=n3
n4=node("e")
n3.next=n4
n5=node("r")
n4.next=n5
obj.display()
#INSERT AT END OF LIST
class node:
    def __init__(self,data):
        self.data=data
        self.next=None

class singlelinkedlist:
    def __init__(self):
        self.head=None

    def insert_end(self,data):
        nb=node(data)
        temp=self.head
        while temp.next:
            temp=temp.next
        temp.next=nb

    def display(self):
        if self.head is None:
            print("linked list is empty")
        else:
            temp=self.head
            while temp:
                print(temp.data," ",end="")
                temp=temp.next
obj=singlelinkedlist()
n=node(10)
obj.head=n
n1=node(20)
n.next=n1
n2=node(30)
n1.next=n2
n3=node(40)
n2.next=n3
n4=node(50)
n3.next=n4
print("before inserting 100")
obj.display()
print("")
print("after inserting 100")
obj.insert_end(100)

#INSERTION AT POSITION
class node:
    def __init__(self,data):
        self.data=data
        self.next=None

class singlelinkedlist:
    def __init__(self):
        self.head=None

    def insert_position(self,pos,data):
        nb=node(data)
        temp=self.head
        for i in range(pos-1):
            temp=temp.next
            nb.next=temp.next
        temp.next=nb

    def display(self):
        if self.head is None:
            print("linked list is empty")
        else:
            temp=self.head
            while temp:
                print(temp.data," ",end="")
                temp=temp.next
obj=singlelinkedlist()
n=node(10)
obj.head=n
n1=node(20)
n.next=n1
n2=node(30)
n1.next=n2
n3=node(40)
n2.next=n3
n4=node(50)
n3.next=n4
print("before inserting 1000")
obj.display()
print("")
print("after inserting 1000")

class node:
    def __init__(self,data):
        self.data=data
        self.next=None

class linkedlist:
    def __init__(self):
        self.head=None
        self.last_node=None

    def append(self,data):
        if self.last_node is None:
            self.head=node(data)
            self.last_node=self.head
        else:
            self.last_node.next=node(data)
            self.last_node=self.last_node.next
            
    def display(self):
        current=self.head
        while current is not None:
            print(current.data,end='')
            current=current.next
a_1list=linkedlist()
n=int(input("how many elements would u  like to add"))
for i in range(n):
      data=int(input("enter data item:"))
      a_1list.append(data)
print('the linked list: ',end='')
a_1list.display()
            15:51 25-02-2023