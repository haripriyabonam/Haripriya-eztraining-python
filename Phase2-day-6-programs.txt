#BST-DELETE
class Node:
    def __init__(self,key):
        self.key=key
        self.left=None
        self.right=None


def inorder(root):
    if root is not None:
        inorder(root.left)
        print(root.key)
        inorder(root.right)

#a new node with given key
def insert(node,key):
    #if tree is empty,return new node
    if node is None:
        return Node(key)
    #otherwise recur down the tree
    if key<node.key:
        node.left=insert(node.left,key)
    else:
        node.right=insert(node.right,key)
    return node
def minvaluenode(node):
    current=node
    #loop down to find the leftmost leaf
    while(current.left is not None):
        current=current.left
    return current

def deletenode(root,key):
    if root is None:
        return root
    if key<root.key:
        root.left=deletenode(root.left,key)
    elif (key>root.key):
        root.right=deldetenode(root.right.key)
    else:
        if root.left is None:
            temp=root.right
            root=None
            return temp
        elif root.right is None:
            temp=root.left
            root=None
            return temp
        temp=minvaluenode(root.right)
        root.key=temp.key
        root.right=deletenode(root.right,temp.key)
    return root
"""               50
                 /  \
               30   70  
              /  \ /  \
            20  40 60 80"""

root=None
root=insert(root, 50)
root=insert(root, 30)
root=insert(root, 20)
root=insert(root, 40)
root=insert(root, 70)
root=insert(root, 60)
root=insert(root, 80)
print("inorder traversal of given tree")
inorder(root)
print("\ndelete 20")
root=deletenode(root,20)
print("inorder traversal of given tree")
inorder(root)
print("\ndelete 30")
root=deletenode(root,30)
print("inorder traversal of given tree")
inorder(root)
print("\ndelete 50")
root=deletenode(root,50)
print("inorder traversal of modified tree")
inorder(root)


#graph implementation using defaultdict
#import dictionary from graph
from collections import defaultdict
#add edge to graph
graph=defaultdict(list)
def addedge(graph,u,v):
    graph[u].append(v)

#function description
def generate_edges(graph):
    edges=[]

    #for each node in graph
    for node in graph:

        #for each neighbour node of a single node
        for neighbour in graph[node]:

             #if edge exists then append
             edges.append((node,neighbour))
    return edges

#declaring-graph as dictionary
addedge(graph,'a','c')
addedge(graph,'b','c')
addedge(graph,'b','e')
addedge(graph,'c','d')
addedge(graph,'c','e')
addedge(graph,'c','a')
addedge(graph,'c','b')
addedge(graph,'e','b')
addedge(graph,'d','c')
addedge(graph,'e','c')

#printing graph
print(generate_edges(graph))


class graph(object):
    def __init__(self,size):
        self.adjmatrix=[]
        for i in range(size):
            self.adjmatrix.append([0 for i in range(size)])
        self.size=size
        
    def add_edge(self,v1,v2):
        if v1==v2:
            print("same vertex %d and %d"%(v1,v2))

        self.adjmatrix[v1][v2]=1
        self.adjmatrix[v2][v1]=1

        #remove edges
    def remove_edges(self,v1,v2):
        if self.adjmatrix[v1][v2]==0:
            print("no edge between %d and %d"%(v1,v2))
            return
        self.adjmatrix[v1][v2]=0
        self.adjmatrix[v2][v1]=0

    def __len__(self):
        return self.size

    #print the matrix
    def print_matrix(self):
        for row in self.adjmatrix:
            for val in row:
                print('{:4}'.format(val)),
            
def main():
    g=graph(5)
    g.add_edge(0,1)
    g.add_edge(0,2)
    g.add_edge(1,2)
    g.add_edge(2,0)
    g.add_edge(2,3)

    g.print_matrix()

if __name__=='__main__':
    main()

graph={
    '5':['3','7'],
    '3':['2','4'],
    '7':['8'],
    '2':[],
    '4':['8'],
    '8':[],
}

visited=[]
queue=[]

def bfs(visited,graph,node):
    visited.append(node)
    queue.append(node)

    while queue:
        m=queue.pop(0)
        print(m,end="")

        for neighbour in graph[m]:
            if neighbour not in visited:
                visited.append(neighbour)
                queue.append(neighbour)

bfs(visited,graph,'5')








    



















